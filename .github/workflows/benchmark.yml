name: Benchmark
on:
  push:
    branches:
      - main
  pull_request:

env:
  DOCKER_BUILDKIT: 1

jobs:
  hello-bench:
    runs-on: [self-hosted, Linux]
    name: HelloBench
    env:
      BENCHMARK_LOG_DIR: ${{ github.workspace }}/log/
      BENCHMARK_RESULT_DIR: ${{ github.workspace }}/benchmark/
      BENCHMARK_REGISTRY: ${{ vars.REGISTRY }}
      BENCHMARK_TARGETS: ""
      BENCHMARK_SAMPLES_NUM: 5
      BENCHMARK_PERCENTILE: 95
      BENCHMARK_PERCENTILES_GRANULARITY: 25
    strategy:
      fail-fast: false
      max-parallel: 1
      matrix:
        runtime: ["podman"]
    steps:
    - name: Install tools
      run: |
          sudo apt-get update && \
          sudo apt-get install -y gnuplot python3-numpy yq
    - uses: actions/checkout@v4
    - name: Prepare directories
      run: mkdir "${BENCHMARK_RESULT_DIR}" "${BENCHMARK_LOG_DIR}"
    - name: Get system information
      run: |
          bash script/util/system_info.sh | \
          tee ${{ env.BENCHMARK_RESULT_DIR }}/system_info.json
    - name: Get test images
      run: |
        # 显示文件内容以确保文件存在且可读
        echo "Content of image_names.yaml:"
        cat script/benchmark/image_names.yaml
        
        # 使用 yq 读取并存储到变量中
        IMAGES=$(yq -r '.images[]' script/benchmark/image_names.yaml | tr '\n' ' ' | sed 's/ $//')
        
        # 显示读取到的镜像列表
        echo "Images found: ${IMAGES}"
        
        # 设置到 GITHUB_ENV
        echo "BENCHMARK_TARGETS=${IMAGES}" >> $GITHUB_ENV
        
        # 验证环境变量是否设置成功
        echo "BENCHMARK_TARGETS from env: $BENCHMARK_TARGETS"
        
        # 显示 GITHUB_ENV 文件内容
        echo "Content of GITHUB_ENV:"
        cat $GITHUB_ENV
    - name: Run benchmark
      env:
        BENCHMARK_RUNTIME_MODE: ${{ matrix.runtime }}
      run: make benchmark
    - uses: actions/upload-artifact@v4
      if: ${{ always() }}
      with:
        name: benchmarking-result-${{ matrix.runtime }}
        path: ${{ env.BENCHMARK_RESULT_DIR }}
